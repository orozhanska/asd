# Task 3: Find Duplicates in an Unsorted Array
# Score: 1 point
# ● Implement a function to find duplicate elements in an unsorted array and return their
# frequencies.
# ● Return the duplicates in from the smallest to the largest number.
# ● It’s not allowed to use a built-in dictionary or set data structures from Python.
# ● Return in a format of the array of pairs (value, frequency), note that we shouldn’t
# include elements with frequence = 1 (since there are no duplicates).
# ● Example: [1, 2, 3, 4, 2, 3, 4, 5, 6] -> [(2, 2), (3, 2), (4, 2)]
 
import unittest


def selection_sort(arr):
    for i in range(0, len(arr)-1):
        min_ind = i
        for k in range (i, len(arr)):
            if arr[k] < arr[min_ind]:
                min_ind = k
        arr[i], arr[min_ind] = arr[min_ind], arr[i]
    return arr

def find_duplicates(arr):
    selection_sort(arr)
    dups = []
    count = 1
    temp_tuple = None
    for x in range(len(arr)-1):
        if arr[x+1] == arr[x]:
            count += 1
            temp_tuple = (arr[x], count)
        else:
            if temp_tuple:
                dups.append(temp_tuple)
            count = 1
            temp_tuple = None
    
    if temp_tuple:
        dups.append(temp_tuple)
    
    return dups

print(find_duplicates([1, 2, 3, 4, 2, 3, 4, 5, 6]))

# tests generated by chatgpt
class TestFindDuplicates(unittest.TestCase):
    
    def test_no_duplicates(self):
        """Test case where the array has no duplicates."""
        self.assertEqual(find_duplicates([1, 2, 3, 4, 5]), [])
    
    def test_all_duplicates(self):
        """Test case where all elements are the same."""
        self.assertEqual(find_duplicates([2, 2, 2, 2, 2]), [(2, 5)])
    
    def test_mixed_duplicates(self):
        """Test case with a mix of duplicates and unique elements."""
        self.assertEqual(find_duplicates([1, 2, 3, 4, 2, 3, 4, 5, 6]), [(2, 2), (3, 2), (4, 2)])
    
    def test_unsorted_array(self):
        """Test case with an unsorted array."""
        self.assertEqual(find_duplicates([4, 2, 3, 2, 4, 3, 5, 6, 1]), [(2, 2), (3, 2), (4, 2)])
    
    def test_empty_array(self):
        """Test case with an empty array."""
        self.assertEqual(find_duplicates([]), [])
    
    def test_single_element(self):
        """Test case with a single element in the array."""
        self.assertEqual(find_duplicates([42]), [])
    
    def test_large_numbers(self):
        """Test case with large numbers."""
        self.assertEqual(find_duplicates([1000000, 999999, 1000000, 999999, 1000001]), [(999999, 2), (1000000, 2)])
    
    def test_negative_numbers(self):
        """Test case with negative numbers."""
        self.assertEqual(find_duplicates([-1, -2, -3, -2, -1, -1]), [(-2, 2), (-1, 3)])
    
    def test_floats(self):
        """Test case with floating-point numbers."""
        self.assertEqual(find_duplicates([1.1, 2.2, 3.3, 1.1, 3.3, 3.3]), [(1.1, 2), (3.3, 3)])
    
    def test_strings(self):
        """Test case with strings (if supported)."""
        self.assertEqual(find_duplicates(["a", "b", "a", "c", "b", "b"]), [("a", 2), ("b", 3)])


if __name__ == "__main__":
    unittest.main()